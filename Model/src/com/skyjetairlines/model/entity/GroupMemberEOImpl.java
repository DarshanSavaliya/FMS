package com.skyjetairlines.model.entity;

import oracle.jbo.Key;
import oracle.jbo.RowSet;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 19 18:09:37 IST 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GroupMemberEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Name,
        Member,
        User,
        Group;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int NAME = AttributesEnum.Name.index();
    public static final int MEMBER = AttributesEnum.Member.index();
    public static final int USER = AttributesEnum.User.index();
    public static final int GROUP = AttributesEnum.Group.index();

    /**
     * This is the default constructor (do not remove).
     */
    public GroupMemberEOImpl() {
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the value of Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for Member, using the alias name Member.
     * @return the value of Member
     */
    public String getMember() {
        return (String) getAttributeInternal(MEMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for Member.
     * @param value value to set the Member
     */
    public void setMember(String value) {
        setAttributeInternal(MEMBER, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getUser() {
        return (EntityImpl) getAttributeInternal(USER);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setUser(EntityImpl value) {
        setAttributeInternal(USER, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getGroup() {
        return (EntityImpl) getAttributeInternal(GROUP);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setGroup(EntityImpl value) {
        setAttributeInternal(GROUP, value);
    }

    /**
     * @param name key constituent
     * @param member key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String name, String member) {
        return new Key(new Object[] { name, member });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.skyjetairlines.model.entity.GroupMemberEO");
    }
    
    public void postChanges(TransactionEvent transactionEvent) {
        if (getPostState() == STATUS_NEW || getPostState() == STATUS_MODIFIED) {
            EntityImpl user = getUser();
            if (user != null) {
                if (user.getPostState() == STATUS_NEW) {
                    user.postChanges(transactionEvent);
                }
            }
        }
        super.postChanges(transactionEvent);
    }
}

