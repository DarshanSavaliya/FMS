package com.skyjetairlines.model.entity;

import java.math.BigDecimal;

import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 16 14:18:38 IST 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TicketFlightEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        TicketId,
        FlightId,
        Amount,
        Ticket;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int TICKETID = AttributesEnum.TicketId.index();
    public static final int FLIGHTID = AttributesEnum.FlightId.index();
    public static final int AMOUNT = AttributesEnum.Amount.index();
    public static final int TICKET = AttributesEnum.Ticket.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TicketFlightEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.skyjetairlines.model.entity.TicketFlightEO");
    }


    /**
     * Gets the attribute value for TicketId, using the alias name TicketId.
     * @return the value of TicketId
     */
    public BigDecimal getTicketId() {
        return (BigDecimal) getAttributeInternal(TICKETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TicketId.
     * @param value value to set the TicketId
     */
    public void setTicketId(BigDecimal value) {
        setAttributeInternal(TICKETID, value);
    }

    /**
     * Gets the attribute value for FlightId, using the alias name FlightId.
     * @return the value of FlightId
     */
    public BigDecimal getFlightId() {
        return (BigDecimal) getAttributeInternal(FLIGHTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FlightId.
     * @param value value to set the FlightId
     */
    public void setFlightId(BigDecimal value) {
        setAttributeInternal(FLIGHTID, value);
    }

    /**
     * Gets the attribute value for Amount, using the alias name Amount.
     * @return the value of Amount
     */
    public BigDecimal getAmount() {
        return (BigDecimal) getAttributeInternal(AMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Amount.
     * @param value value to set the Amount
     */
    public void setAmount(BigDecimal value) {
        setAttributeInternal(AMOUNT, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public TicketEOImpl getTicket() {
        return (TicketEOImpl) getAttributeInternal(TICKET);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTicket(TicketEOImpl value) {
        setAttributeInternal(TICKET, value);
    }


    /**
     * @param ticketId key constituent
     * @param flightId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal ticketId, BigDecimal flightId) {
        return new Key(new Object[] { ticketId, flightId });
    }

    public void postChanges(TransactionEvent transactionEvent) {
        if (getPostState() == STATUS_NEW || getPostState() == STATUS_MODIFIED) {
            EntityImpl ticket = getTicket();
            if (ticket != null) {
                if (ticket.getPostState() == STATUS_NEW) {
                    ticket.postChanges(transactionEvent);
                }
            }
        }
        super.postChanges(transactionEvent);
    }
}

